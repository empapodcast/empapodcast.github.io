
### Get latest copy of darksky package from github
### (https://github.com/hrbrmstr/darksky)
#devtools::install_github("hrbrmstr/darksky")

fremont.lat <- 47.6475338
fremont.lon <- -122.34974740000001



##' Get historical weather data
##'
##' Uses the Dark Sky API to get historical weather for a specified
##' date range.  User specifies the latitude and longtitude.
##' @title Dark Sky data
##' @param start.date Starting date for weather formatte as a Date
##'     object.
##' @param end.date Starting date for weather formatte as a Date
##'     object.
##' @param lat Location latitude
##' @param lon Location longitude
##' @return 
##' @author Romel D. Mackelprang
get.ds.data <- function(start.date=as.Date('2012-10-03'),
                        end.date=as.Date('2015-06-29'),
                        lat=fremont.lat,
                        lon=fremont.lon){

    require(darksky)
    require(purrr)

    ## Set API key
    Sys.setenv(darksky_api_key='810a8d95ed11fc11ec7c6a0bf275307d')
                        
    dates <- seq(start.date, end.date,1)
    dates <- paste(dates, 'T09:00:00', sep='')

    forecasts <- lapply(dates, function(x){
        out <- get_forecast_for(fremont.lat, fremont.lon, x)
    })
    names(forecasts) <- dates
    return(forecaste)
}

ds1 <- get.ds.data()
ds2 <- get.ds.data(start.date=as.Date('2012-10-03')-1000,
                   end.date=as.Date('2012-10-03'))
save(forecasts, file=paste('./DataIntermediate/Darksky_',start.date,
                           '_',end.date,'.Rdata', sep=''))


load('./DataIntermediate/ds1.Rdata')


daily.ds <- function(data=ds1){

    require(data.table)
    require(lubridate)

    ## Rbind to single dataframe.  Not all variables are available for
    ## each day so we use the rbind.fill() function from plyr
    daily <- lapply(data, function(x){return(x$daily)})
    daily <- lapply(daily, as.data.frame)
    daily <- do.call(plyr::rbind.fill, daily)
    daily <- data.table(daily)
    
    ## All date-time variables are stored as POSIXct.  Sometime we
    ## just want the date or time.
    clocks = function(t){as.POSIXct(strftime(t, format="%H:%M:%S"), format="%H:%M:%S")}
    daily[,date:=lubridate::date(time)]
    daily[,year:=lubridate::year(time)]
    daily[,day.of.year:=lubridate::yday(time)]
    daily[,sunriseTime2:=clocks(sunriseTime)]
    daily[,sunsetTime2:=clocks(sunsetTime)]
    daily[,temperatureMinTime2:=clocks(temperatureMinTime)]
    daily[,temperatureMaxTime2:=clocks(temperatureMaxTime)]
    daily[,apparentTemperatureMinTime2:=clocks(apparentTemperatureMinTime)]
    daily[,apparentTemperatureMaxTime2:=clocks(apparentTemperatureMaxTime)]
    daily[,precipIntensityMaxTime2:=clocks(precipIntensityMaxTime)]

    ## Factorize
    daily[,summary:=factor(summary)]
    daily[,icon:=factor(icon)]
    daily[,precipType:=factor(precipType)]

    return(daily)

}

hourly.ds <- function(data=ds1){

    require(data.table)

    ## Rbind to single dataframe.  Not all variables are available for
    ## each day so we use the rbind.fill() function from plyr
    hourly <- lapply(data, function(x){return(x$hourly)})
    hourly <- lapply(hourly, as.data.frame)
    hourly <- do.call(plyr::rbind.fill, hourly)
    hourly <- data.table(hourly)

    ## Separate date and time
    hourly[,date:=lubridate::date(time)]
    hourly[,year:=lubridate::year(time)]
    hourly[,hour:=lubridate::hour(time)]

    return(hourly)

}

ds1.daily <- daily.ds(data=ds1)
ds1.hourly <- hourly.ds(data=ds1)

p <- ggplot(ds1.hourly, aes(x=time, y=visibility)) +
    geom_point() + geom_smooth() + facet_wrap(~year)
p

p <- ggplot(ds1.hourly, aes(x=precipIntensity, y=temperature)) +
    geom_point() + geom_smooth()
p

require(ggplot2)
p <- ggplot(ds1.daily, aes(x=day.of.year, y=temperatureMax)) +
    geom_point() + geom_smooth() + facet_wrap(~year, ncol=1)
p

p <- ggplot(ds1.daily, aes(x=day.of.year, y=temperatureMax,
                           group=factor(year), colour=factor(year))) +
    geom_smooth()
p

p <- ggplot(ds1.daily, aes(x=year, y=temperatureMax,
                           group=day.of.year, colour=day.of.year)) +
    geom_line() + geom_smooth()
p


